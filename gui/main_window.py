from tkinter import messagebox

import customtkinter as ctk

from gui.incident_tracker import IncidentTracker
from gui.user_manager_window import UserManagerDialog


class GradientFrame(ctk.CTkCanvas):
    def __init__(self, master, color1, color2, **kwargs):
        kwargs.setdefault('bg', master["bg"])
        kwargs.setdefault('highlightthickness', 0)
        super().__init__(master, **kwargs)
        self.color1 = color1
        self.color2 = color2
        self.bind("<Configure>", self._draw_gradient)

    def _draw_gradient(self, event=None):
        self.delete("gradient")
        width = self.winfo_width()
        height = self.winfo_height()
        limit = height
        (r1, g1, b1) = self.winfo_rgb(self.color1)
        (r2, g2, b2) = self.winfo_rgb(self.color2)
        r_ratio = float(r2 - r1) / limit
        g_ratio = float(g2 - g1) / limit
        b_ratio = float(b2 - b1) / limit
        for i in range(limit):
            nr = int(r1 + (r_ratio * i)) >> 8
            ng = int(g1 + (g_ratio * i)) >> 8
            nb = int(b1 + (b_ratio * i)) >> 8
            color = f"#{nr:02x}{ng:02x}{nb:02x}"
            self.create_line(0, i, width, i, tags=("gradient",), fill=color)
        self.lower("gradient")


class MainWindow(ctk.CTkFrame):
    def __init__(self, master, db, user_info, on_logout):
        super().__init__(master)
        self.db = db
        self.user_info = user_info
        self.on_logout = on_logout
        self.incident_window = None

        # –¶–≤–µ—Ç–∞ –ø–æ —Ä–æ–ª—è–º
        role_colors = {
            "admin": {
                "gradient_start": "#4b0000",
                "gradient_end": "#8b0000",
                "frame_color": "#3b1e1e"
            },
            "user": {
                "gradient_start": "#005f73",
                "gradient_end": "#0a9396",
                "frame_color": "#023047"
            }
        }
        colors = role_colors[user_info["role"]]

        # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
        self.gradient = GradientFrame(self, colors["gradient_start"], colors["gradient_end"], 
                                   width=400, height=520, highlightthickness=0)
        self.gradient.pack(fill="both", expand=True)

        self.inner_frame = ctk.CTkFrame(self.gradient, fg_color=colors["frame_color"], 
                                      width=360, height=480)
        self.inner_frame.place(relx=0.5, rely=0.5, anchor="center")

        master.title(f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Äî {user_info['username']}")
        master.geometry("400x520+700+300")
        master.resizable(False, False)
        master.configure(bg="#0f2027")

        # –®—Ä–∏—Ñ—Ç—ã
        self.title_font = ctk.CTkFont(size=22, weight="bold")
        self.button_font = ctk.CTkFont(size=14, weight="bold")

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.title_label = ctk.CTkLabel(
            self.inner_frame,
            text=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_info['username']}!",
            font=self.title_font,
            text_color="#FFFFFF"
        )
        self.title_label.place(relx=0.5, rely=0.08, anchor="center")

        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        button_options = {
            "height": 45,
            "width": 300,
            "corner_radius": 12,
            "font": self.button_font,
            "anchor": "center"
        }

        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ (–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞, –∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        buttons = [
            {
                "text": "üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞–º–∏",
                "fg_color": "#4a90e2",
                "hover_color": "#357ABD",
                "command": self.open_incident_tracker,
                "rely": 0.22,
                "admin_only": False
            },
            {
                "text": "üè∑ –°—Ç–∞—Ç—É—Å—ã –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤",
                "fg_color": "#5bc0de",
                "hover_color": "#46b8da",
                "command": self.open_statuses_manager,
                "rely": 0.32,
                "admin_only": False
            },
            {
                "text": "üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏",
                "fg_color": "#5cb85c",
                "hover_color": "#4cae4c",
                "command": self.open_organizations_manager,
                "rely": 0.42,
                "admin_only": False
            },
            {
                "text": "üëî –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ",
                "fg_color": "#f0ad4e",
                "hover_color": "#eea236",
                "command": self.open_responsibles_manager,
                "rely": 0.52,
                "admin_only": False
            },
            {
                "text": "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
                "fg_color": "#226fc6",
                "hover_color": "#2D6DAC",
                "command": self._open_user_manager,
                "rely": 0.62,
                "admin_only": True
            },
            {
                "text": "üõ° –ú–µ—Ä—ã —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
                "fg_color": "#d9534f",
                "hover_color": "#c9302c",
                "command": self.open_measures_manager,
                "rely": 0.72,
                "admin_only": True
            },
            {
                "text": "üìú –ñ—É—Ä–Ω–∞–ª –∏–∑–º–µ–Ω–µ–Ω–∏–π",
                "fg_color": "#777777",
                "hover_color": "#5e5e5e",
                "command": self.open_history_viewer,
                "rely": 0.82,
                "admin_only": True
            }
        ]

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        for btn in buttons:
            button = ctk.CTkButton(
                self.inner_frame,
                text=btn["text"],
                fg_color=btn["fg_color"],
                hover_color=btn["hover_color"],
                text_color="white",
                command=btn["command"],
                state="normal" if (user_info["role"] == "admin" or not btn["admin_only"]) else "disabled",
                **{k: v for k, v in button_options.items() if k != "anchor"}
            )
            if user_info["role"] != "admin" and btn["admin_only"]:
                button.configure(text=btn["text"] + "(–î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç)")
            button.configure(fg_color="#555555" if user_info["role"] != "admin" and btn["admin_only"] else btn["fg_color"])
            button.place(relx=0.5, rely=btn["rely"], anchor="center")


        # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
        self.logout_btn = ctk.CTkButton(
            self.inner_frame,
            text="üö™ –í—ã–π—Ç–∏",
            fg_color="#a20505",
            hover_color="#685b5a",
            text_color="white",
            command=self.logout,
            height=40,
            width=200,
            corner_radius=10,
            font=self.button_font
        )
        self.logout_btn.place(relx=0.5, rely=0.92, anchor="center")


    def open_incident_tracker(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞–º–∏"""
        if self.incident_window is None or not self.incident_window.winfo_exists():
            self.incident_window = ctk.CTkToplevel(self)
            self.incident_window.geometry("800x600+150+150")
            self.incident_window.title("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞–º–∏")
            tracker = IncidentTracker(self.incident_window, self.db, self.user_info)
            tracker.pack(fill="both", expand=True)
        else:
            self.incident_window.lift()

    def _open_user_manager(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        if self.user_info['role'] != 'admin':
            messagebox.showwarning("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", "–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        UserManagerDialog(self, self.db, self.user_info)

    def open_statuses_manager(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤"""
        status_window = ctk.CTkToplevel(self)
        status_window.title("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤")
        status_window.geometry("600x400")
        
        # –ó–¥–µ—Å—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–µ–π –°—Ç–∞—Ç—É—Å—ã–ò–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
        # ...

    def open_organizations_manager(self):
        """–û–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏"""
        org_window = ctk.CTkToplevel(self)
        org_window.title("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏")
        org_window.geometry("800x600")
        
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–µ–π –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        # ...

    def open_responsibles_manager(self):
        """–û–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ª–∏—Ü–∞–º–∏"""
        resp_window = ctk.CTkToplevel(self)
        resp_window.title("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º–∏")
        resp_window.geometry("900x700")
        
        # –†–∞–±–æ—Ç–∞ —Å —Ç–∞–±–ª–∏—Ü–µ–π –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ + —Å–≤—è–∑—å —Å –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏
        # ...

    def open_measures_manager(self):
        """–û–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–∞–º–∏ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        measures_window = ctk.CTkToplevel(self)
        measures_window.title("–ú–µ—Ä—ã —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
        measures_window.geometry("600x500")
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü–µ–π –ú–µ—Ä—ã–†–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        # ...

    def open_history_viewer(self):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        history_window = ctk.CTkToplevel(self)
        history_window.title("–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        history_window.geometry("1000x800")
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ò—Å—Ç–æ—Ä–∏—è–ò–∑–º–µ–Ω–µ–Ω–∏–π
        # ...

    def logout(self):
        if self.incident_window and self.incident_window.winfo_exists():
            self.incident_window.destroy()
        self.on_logout()
